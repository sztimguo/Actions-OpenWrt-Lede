# This is a basic workflow to help you get started with Actions

name: Make X86-64 Config 

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  #schedule:
  #  - cron: 0 2 * * 4
    
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: build/X86/x86-64.config
  DIY_P1_SH: build/X86/diy-part1.sh
  DIY_P2_SH: build/X86/diy-part2.sh
  TZ: Asia/Shanghai
  SSH_ACTIONS: false

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:
    - name: Checkout | 检查项目分支
      uses: actions/checkout@v3

    - name: Initialization environment | 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /usr/lib/jvm /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 lib32stdc++6 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl rename libpcap0.8-dev swig rsync
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
        sudo mkdir -p /upload
        sudo chown $USER:$GROUPS /upload
        
        cd /upload
        echo "UPLOAD=$PWD" >> $GITHUB_ENV
        echo "NETIP=package/base-files/files/etc/networkip" >> $GITHUB_ENV
        echo "WEBWEB=package/base-files/files/etc/webweb.sh" >> $GITHUB_ENV
        echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
        
    - name: Clone source code | 下载固件源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: Load custom configuration 1 | 加载自定义设置 1
      run: |
        #[ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: Update feeds | 下载插件
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds | 安装插件
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration 2 | 加载自定义设置 2
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv -f $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Make Config | 生成config
      run: |     
        cd openwrt
        ls -a
        make defconfig
        echo "TARGET_BOARD=$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)" >> $GITHUB_ENV
        
    - name: Get patchver | 查询CPU型号、内核版本
      continue-on-error: true
      run: |
        cd openwrt
        if [[ `grep -c "KERNEL_PATCHVER:=" $GITHUB_WORKSPACE/openwrt/target/linux/${TARGET_BOARD}/Makefile` -eq '1' ]]; then
          PATCHVE="$(egrep -o 'KERNEL_PATCHVER:=[0-9]+\.[0-9]+' $GITHUB_WORKSPACE/openwrt/target/linux/${TARGET_BOARD}/Makefile |cut -d "=" -f2)"
          echo "PATCHVE=${PATCHVE}" >> $GITHUB_ENV
        elif [[ `grep -c "KERNEL_PATCHVER=" $GITHUB_WORKSPACE/openwrt/target/linux/${TARGET_BOARD}/Makefile` -eq '1' ]]; then
          PATCHVE="$(egrep -o 'KERNEL_PATCHVER=[0-9]+\.[0-9]+' $GITHUB_WORKSPACE/openwrt/target/linux/${TARGET_BOARD}/Makefile |cut -d "=" -f2)"
          echo "PATCHVE=${PATCHVE}" >> $GITHUB_ENV
        else
          echo "PATCHVER=unknown" >> $GITHUB_ENV
        fi
        if [[ -n ${PATCHVE} ]] && [[ -f $GITHUB_WORKSPACE/openwrt/include/kernel-${PATCHVE} ]]; then
          PATCHVER=$(egrep -o "${PATCHVE}.[0-9]+" $GITHUB_WORKSPACE/openwrt/include/kernel-${PATCHVE})
          echo "PATCHVER=${PATCHVER}" >> $GITHUB_ENV
        elif [[ -n ${PATCHVE} ]] && [[ ! -f $GITHUB_WORKSPACE/openwrt/include/kernel-${PATCHVE} ]]; then
          PATCHVER=$(egrep -o "${PATCHVE}.[0-9]+" $GITHUB_WORKSPACE/openwrt/include/kernel-version.mk)
          echo "PATCHVER=${PATCHVER}" >> $GITHUB_ENV
        fi
        echo "内核版本：${PATCHVER}"
        cpuinfo=`cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c | sed 's/      //'`
        echo "CPU型号：${cpuinfo}"
        
    - name: SSH connection to Actions | SSH链接管理
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Make diffonfig | 生成diff.config
      run: |
        cd openwrt
        sudo bash scripts/diffconfig.sh > diff.config
        cp .config ${UPLOAD}/x86-64.config
        cp diff.config ${UPLOAD}/x86-64-diff.config
        cp .config.old ${UPLOAD}/x86-64.config.old
        
    - name: Upload Config | 上传config至github actions
      uses: actions/upload-artifact@master
      with:
        name: x86-64-Config
        path: ${{env.UPLOAD}}
